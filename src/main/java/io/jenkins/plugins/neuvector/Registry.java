package io.jenkins.plugins.neuvector;

import com.google.common.base.Strings;
import hudson.Extension;
import hudson.Util;
import hudson.model.AbstractDescribableImpl;
import hudson.model.Descriptor;
import java.io.Serializable;

import hudson.util.FormValidation;
import hudson.util.Secret;
import org.kohsuke.stapler.DataBoundConstructor;
import org.kohsuke.stapler.DataBoundSetter;
import org.kohsuke.stapler.QueryParameter;

public class Registry extends AbstractDescribableImpl<Registry> implements Serializable {

    private static final long serialVersionUID = 1L;
    private String nickname;
    private String regUrl;
    private String regUsername;
    private Secret regPassword;

    public Registry(String nickname, String regUrl, String regUsername, Secret regPassword) {
        this.nickname = nickname.trim();
        this.regUrl = regUrl.trim();
        this.regUsername = regUsername.trim();
        this.regPassword = regPassword;
    }

    @DataBoundConstructor
    public Registry(String nickname, String regUrl) {
        this.nickname = nickname;
        this.regUrl = regUrl;
    }

    @DataBoundSetter
    public void setRegUsername(String regUsername) {
        this.regUsername = Util.fixEmpty(regUsername);
    }

    @DataBoundSetter
    public void setRegPassword(Secret regPassword) {
        if (regPassword.getPlainText().isEmpty()) {
            this.regPassword = null;
            return;
        }
        this.regPassword = regPassword;
    }

    public String getNickname() {
        return nickname;
    }

    public String getRegUrl() {
        return regUrl;
    }

    public String getRegUsername() {
        return regUsername;
    }

    public Secret getRegPassword() {
        return regPassword;
    }

    @Extension
    public static class DescriptorImpl extends Descriptor<Registry> {
        @Override
        public String getDisplayName() {
            return "Add Registry";
        }

        public FormValidation doCheckNickname(@QueryParameter String value) {
            if (Strings.isNullOrEmpty(value) || value.trim().isEmpty()) {
                return FormValidation.error(Messages.Registry_DescriptorImpl_errors_nickname());
            }
            return FormValidation.ok();
        }

        public FormValidation doCheckRegUrl(@QueryParameter String value) {
            if (Strings.isNullOrEmpty(value) || value.trim().isEmpty() || !value.trim().matches("^(http|https)://.*$")) {
                return FormValidation.error(Messages.Registry_DescriptorImpl_errors_regUrl());
            }
            return FormValidation.ok();
        }
    }
}